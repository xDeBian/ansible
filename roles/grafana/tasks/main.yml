---
- name: Install prerequisites for Grafana
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - apt-transport-https
    - software-properties-common
    - wget

- name: Create keyrings directory for Grafana
  file:
    path: /etc/apt/keyrings/
    state: directory

- name: Set timezone to Georgia
  timezone:
    name: Asia/Tbilisi

- name: Install NTP
  apt:
    name: ntp
    state: present

- name: Configure NTP servers
  lineinfile:
    path: /etc/ntp.conf
    line: "{{ item }}"
    insertafter: EOF
  loop:
    - "server ge.pool.ntp.org"
    - "server 0.ge.pool.ntp.org"
    - "server 1.ge.pool.ntp.org"
    - "server 2.ge.pool.ntp.org"

- name: Restart NTP service
  service:
    name: ntp
    state: restarted

- name: Download Grafana GPG key
  get_url:
    url: https://apt.grafana.com/gpg.key
    dest: /etc/apt/keyrings/grafana.gpg
    mode: '0644'

- name: Add Grafana repository to sources.list.d
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main"

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Grafana
  apt:
    name: grafana
    state: present

- name: Start Grafana service
  service:
    name: grafana-server
    state: started
    enabled: yes

- name: Wait for Grafana to start
  wait_for:
    port: 3000
    host: 192.168.100.32
    delay: 30
    state: started

- name: Reset Grafana admin password
  command: grafana-cli --homepath "/usr/share/grafana" admin reset-admin-password admin

- name: Create or update a Grafana user
  community.grafana.grafana_user:
    url: "http://192.168.100.32:3000"
    url_username: admin
    url_password: admin
    name: "Dato Dzneladze"
    email: grafana@devops.tbc
    login: admin
    password: admin
    is_admin: true
    state: present

- name: Delete Prometheus Data Source if it exists
  uri:
    url: "http://192.168.100.32:3000/api/datasources/name/Prometheus"
    method: DELETE
    headers:
      Content-Type: "application/json"
      Authorization: "Basic {{ 'admin:admin' | b64encode }}"
  ignore_errors: yes

- name: Add Prometheus Data Source
  uri:
    url: "http://192.168.100.32:3000/api/datasources"
    method: POST
    body_format: json
    body:
      name: "Prometheus"
      type: "prometheus"
      url: "http://192.168.100.31:9090"
      access: "proxy"
      isDefault: true
    headers:
      Content-Type: "application/json"
      Authorization: "Basic {{ 'admin:admin' | b64encode }}"

- name: Check if DevOps Academy Organization already exists
  uri:
    url: "http://192.168.100.32:3000/api/orgs/name/DevOps%20Academy"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Basic {{ 'admin:admin' | b64encode }}"
  register: organization_check
  ignore_errors: yes

- name: Create DevOps Academy Organization if it does not exist
  uri:
    url: "http://192.168.100.32:3000/api/orgs"
    method: POST
    body_format: json
    body:
      name: "DevOps Academy"
    headers:
      Content-Type: "application/json"
      Authorization: "Basic {{ 'admin:admin' | b64encode }}"
  when: organization_check.status != 200

- name: Install node exporter dashboard
  get_url:
    url: https://raw.githubusercontent.com/rfrail3/grafana-dashboards/master/prometheus/node-exporter-full.json
    dest: /var/lib/grafana/node-exporter.json
    mode: '0755'

- name: Activate dashboard for node exporter
  template:
    src: dashboard-node-exporter.yml.j2
    dest: /etc/grafana/provisioning/dashboards/dashboard-node-exporter.yml
    mode: 0755

- name: Copy Prometheus Alerts dashboard JSON
  copy:
    src: new_dashboard.json
    dest: /var/lib/grafana/new_dashboard.json
    mode: '0755'

- name: Activate dashboard for Prometheus Alerts
  template:
    src: dashboard-prometheus-alerts.yml.j2
    dest: /etc/grafana/provisioning/dashboards/dashboard-prometheus-alerts.yml
    mode: 0755

- name: Restart Grafana service
  systemd:
    name: grafana-server
    state: restarted
    enabled: yes
    daemon_reload: yes
